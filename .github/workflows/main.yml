name: Scrape Territorial.io Results

on:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Allows manual triggering

concurrency:
  group: scrape-territorial-io-results  # A unique group name to limit concurrency
  cancel-in-progress: true  # Cancels any currently running workflow before starting a new one

jobs:
  scrape_and_post:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4
      
      - name: Load existing data
        id: load_data
        run: |
          if [ -f clan_results.json ]; then
            echo "Loading existing data..."
          else
            echo "[]" > clan_results.json
          fi

      - name: Run the scraper script
        run: python main.py
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}  # Set for multiple general webhooks
          DISCORD_WINNER_WEBHOOK_URL: ${{ secrets.DISCORD_WINNER_WEBHOOK_URL }}  # Set for multiple winner webhooks

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add clan_results.json
          git commit -m 'Update clan results data'
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/AngelAlt6/results.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  send_top_winner:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Send top winner message
        run: python -c 'import main; main.send_top_winner()'  # Directly call the send_top_winner function from the script
        env:
          DISCORD_WINNER_WEBHOOK_URLS: ${{ secrets.DISCORD_WINNER_WEBHOOK_URL }}  # Use for winner messages

    schedule:
      - cron: '0 * * * *'  # Send top winner message once every hour
